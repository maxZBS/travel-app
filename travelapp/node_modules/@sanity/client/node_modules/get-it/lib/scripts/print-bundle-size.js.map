{"version":3,"sources":["../../src/scripts/print-bundle-size.js"],"names":["fs","require","path","boxen","chalk","gzipSize","prettyBytes","read","filePath","Promise","resolve","reject","readFile","err","content","zip","zipSize","uncompressed","length","compressed","umdPath","join","__dirname","bundlePath","minPath","allPath","minAllPath","all","map","then","files","output","catch","throwOnError","res","text","size","console","log","padding","borderColor","align","code","Error","bytes","color"],"mappings":"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","sourcesContent":["/* eslint-disable no-console */\nconst fs = require('fs')\nconst path = require('path')\nconst boxen = require('boxen')\nconst chalk = require('chalk')\nconst gzipSize = require('gzip-size')\nconst prettyBytes = require('pretty-bytes')\n\nconst read = filePath =>\n  new Promise((resolve, reject) => {\n    fs.readFile(filePath, (err, content) => {\n      if (err) {\n        reject(err)\n      } else {\n        resolve(content)\n      }\n    })\n  })\n\nconst zip = content =>\n  new Promise((resolve, reject) => {\n    gzipSize(content, (err, zipSize) => {\n      if (err) {\n        reject(err)\n      } else {\n        resolve({\n          uncompressed: content.length,\n          compressed: zipSize\n        })\n      }\n    })\n  })\n\nconst umdPath = path.join(__dirname, '..', '..', 'umd')\nconst bundlePath = path.join(umdPath, 'get-it.js')\nconst minPath = path.join(umdPath, 'get-it.min.js')\nconst allPath = path.join(umdPath, 'get-it-all.js')\nconst minAllPath = path.join(umdPath, 'get-it-all.min.js')\n\nPromise.all([bundlePath, minPath, allPath, minAllPath].map(read))\n  .then(files => Promise.all(files.map(zip)))\n  .then(output)\n  .catch(throwOnError)\n\nfunction output(res) {\n  const text = [\n    'UMD bundle size:',\n    '────────────────',\n    `Raw: ${size(res[0].uncompressed)}`,\n    `Raw + gzip: ${size(res[0].compressed)}`,\n    '',\n    `Minified: ${size(res[1].uncompressed)}`,\n    `Minified + gzip: ${size(res[1].compressed)}`,\n    '',\n    `Full bundle: ${size(res[2].uncompressed)}`,\n    `Full bundle + gzip: ${size(res[2].compressed)}`,\n    '',\n    `Full bundle, minified: ${size(res[3].uncompressed)}`,\n    `Full bundle, minified + gzip: ${size(res[3].compressed)}`\n  ].join('\\n')\n\n  console.log(\n    boxen(text, {\n      padding: 1,\n      borderColor: 'yellow',\n      align: 'right'\n    })\n  )\n}\n\nfunction throwOnError(err) {\n  if (err && err.code === 'ENOENT') {\n    throw new Error('File not found, did you run `npm run bundle` first?')\n  } else if (err) {\n    throw err\n  }\n}\n\nfunction size(bytes) {\n  const color = bytes > 1024 * 50 ? 'red' : 'green'\n  return chalk[color](prettyBytes(bytes))\n}\n"],"file":"print-bundle-size.js"}