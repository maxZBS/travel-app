{"version":3,"sources":["../../src/scripts/print-bundle-size.js"],"names":["fs","require","path","boxen","chalk","gzipSize","prettyBytes","read","filePath","Promise","resolve","reject","readFile","err","content","zip","zipSize","uncompressed","length","compressed","umdPath","join","__dirname","bundlePath","minPath","allPath","minAllPath","all","map","then","files","output","catch","throwOnError","res","text","size","console","log","padding","borderColor","align","code","Error","bytes","color"],"mappings":"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","sourcesContent":["/* eslint-disable no-console */\nconst fs = require('fs')\nconst path = require('path')\nconst boxen = require('boxen')\nconst chalk = require('chalk')\nconst gzipSize = require('gzip-size')\nconst prettyBytes = require('pretty-bytes')\n\nconst read = filePath =>\n  new Promise((resolve, reject) => {\n    fs.readFile(filePath, (err, content) => {\n      if (err) {\n        reject(err)\n      } else {\n        resolve(content)\n      }\n    })\n  })\n\nconst zip = content =>\n  new Promise((resolve, reject) => {\n    gzipSize(content, (err, zipSize) => {\n      if (err) {\n        reject(err)\n      } else {\n        resolve({\n          uncompressed: content.length,\n          compressed: zipSize\n        })\n      }\n    })\n  })\n\nconst umdPath = path.join(__dirname, '..', '..', 'umd')\nconst bundlePath = path.join(umdPath, 'get-it.js')\nconst minPath = path.join(umdPath, 'get-it.min.js')\nconst allPath = path.join(umdPath, 'get-it-all.js')\nconst minAllPath = path.join(umdPath, 'get-it-all.min.js')\n\nPromise.all([bundlePath, minPath, allPath, minAllPath].map(read))\n  .then(files => Promise.all(files.map(zip)))\n  .then(output)\n  .catch(throwOnError)\n\nfunction output(res) {\n  const text = [\n    'UMD bundle size:',\n    '────────────────',\n    `Raw: ${size(res[0].uncompressed)}`,\n    `Raw + gzip: ${size(res[0].compressed)}`,\n    '',\n    `Minified: ${size(res[1].uncompressed)}`,\n    `Minified + gzip: ${size(res[1].compressed)}`,\n    '',\n    `Full bundle: ${size(res[2].uncompressed)}`,\n    `Full bundle + gzip: ${size(res[2].compressed)}`,\n    '',\n    `Full bundle, minified: ${size(res[3].uncompressed)}`,\n    `Full bundle, minified + gzip: ${size(res[3].compressed)}`\n  ].join('\\n')\n\n  console.log(\n    boxen(text, {\n      padding: 1,\n      borderColor: 'yellow',\n      align: 'right'\n    })\n  )\n}\n\nfunction throwOnError(err) {\n  if (err && err.code === 'ENOENT') {\n    throw new Error('File not found, did you run `npm run bundle` first?')\n  } else if (err) {\n    throw err\n  }\n}\n\nfunction size(bytes) {\n  const color = bytes > 1024 * 50 ? 'red' : 'green'\n  return chalk[color](prettyBytes(bytes))\n}\n"],"file":"print-bundle-size.js"}